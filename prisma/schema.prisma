generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]

  role Role @default(GUEST)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id              Int            @id @default(autoincrement())
  create_time     DateTime       @default(now())
  userId          String
  User            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  postVersions    Post_Version[]
  current_version Int?
  currentVersion  Post_Version?  @relation("PostToCurrentVersion", fields: [id, current_version], references: [postId, version])

  @@unique([id, current_version])
}

model Post_Version {
  version     Int                @default(1)
  title       String
  description String?
  content     String
  update_time DateTime           @default(now())
  postId      Int
  tags        TagOnPostVersion[]
  Post        Post               @relation(fields: [postId], references: [id])
  isCurrent   Post?              @relation("PostToCurrentVersion")

  @@id([postId, version])
}

model Tag {
  name         String             @id
  postVersions TagOnPostVersion[]
}

model TagOnPostVersion {
  post_VersionPostId  Int
  post_VersionVersion Int
  tagName             String
  tag                 Tag          @relation(fields: [tagName], references: [name], onDelete: Cascade)
  postVersion         Post_Version @relation(fields: [post_VersionPostId, post_VersionVersion], references: [postId, version], onDelete: Cascade)

  @@id([tagName, post_VersionPostId, post_VersionVersion])
}
