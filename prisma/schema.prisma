generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  role String @default("GUEST")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id           Int            @id @default(autoincrement())
  create_time  DateTime       @default(now())
  userId       String
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  postVersions Post_Version[]
}

model Post_Version {
  version     Int                @default(1)
  title       String
  description String?
  content     String
  update_time DateTime           @default(now())
  postId      Int
  published   Boolean            @default(false)
  Post        Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
  tags        TagOnPostVersion[]

  @@id([postId, version])
}

model Tag {
  id           Int                @id @default(autoincrement())
  name         String             @unique
  postVersions TagOnPostVersion[]
}

model TagOnPostVersion {
  post_VersionPostId  Int
  post_VersionVersion Int
  tagId               Int
  tag                 Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)
  postVersion         Post_Version @relation(fields: [post_VersionPostId, post_VersionVersion], references: [postId, version], onDelete: Cascade)

  @@id([tagId, post_VersionPostId, post_VersionVersion])
}
